package app.taolin.cnbeta.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVOR_ITEM".
*/
public class FavorItemDao extends AbstractDao<FavorItem, String> {

    public static final String TABLENAME = "FAVOR_ITEM";

    /**
     * Properties of entity FavorItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sid = new Property(0, String.class, "sid", true, "SID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Pubtime = new Property(2, String.class, "pubtime", false, "PUBTIME");
        public final static Property Collecttime = new Property(3, String.class, "collecttime", false, "COLLECTTIME");
    };


    public FavorItemDao(DaoConfig config) {
        super(config);
    }
    
    public FavorItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVOR_ITEM\" (" + //
                "\"SID\" TEXT PRIMARY KEY NOT NULL ," + // 0: sid
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"PUBTIME\" TEXT," + // 2: pubtime
                "\"COLLECTTIME\" TEXT);"); // 3: collecttime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVOR_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FavorItem entity) {
        stmt.clearBindings();
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(1, sid);
        }
        stmt.bindString(2, entity.getTitle());
 
        String pubtime = entity.getPubtime();
        if (pubtime != null) {
            stmt.bindString(3, pubtime);
        }
 
        String collecttime = entity.getCollecttime();
        if (collecttime != null) {
            stmt.bindString(4, collecttime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FavorItem entity) {
        stmt.clearBindings();
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(1, sid);
        }
        stmt.bindString(2, entity.getTitle());
 
        String pubtime = entity.getPubtime();
        if (pubtime != null) {
            stmt.bindString(3, pubtime);
        }
 
        String collecttime = entity.getCollecttime();
        if (collecttime != null) {
            stmt.bindString(4, collecttime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FavorItem readEntity(Cursor cursor, int offset) {
        FavorItem entity = new FavorItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sid
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pubtime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // collecttime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FavorItem entity, int offset) {
        entity.setSid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setPubtime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCollecttime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FavorItem entity, long rowId) {
        return entity.getSid();
    }
    
    @Override
    public String getKey(FavorItem entity) {
        if(entity != null) {
            return entity.getSid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
