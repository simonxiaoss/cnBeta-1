package app.taolin.cnbeta.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVOR_ARTICLE".
*/
public class FavorArticleDao extends AbstractDao<FavorArticle, String> {

    public static final String TABLENAME = "FAVOR_ARTICLE";

    /**
     * Properties of entity FavorArticle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sid = new Property(0, String.class, "sid", true, "SID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Pubtime = new Property(2, String.class, "pubtime", false, "PUBTIME");
        public final static Property Collecttime = new Property(3, String.class, "collecttime", false, "COLLECTTIME");
        public final static Property Source = new Property(4, String.class, "source", false, "SOURCE");
        public final static Property Counter = new Property(5, String.class, "counter", false, "COUNTER");
        public final static Property Good = new Property(6, String.class, "good", false, "GOOD");
        public final static Property Comments = new Property(7, String.class, "comments", false, "COMMENTS");
        public final static Property Hometext = new Property(8, String.class, "hometext", false, "HOMETEXT");
        public final static Property Bodytext = new Property(9, String.class, "bodytext", false, "BODYTEXT");
    };


    public FavorArticleDao(DaoConfig config) {
        super(config);
    }
    
    public FavorArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVOR_ARTICLE\" (" + //
                "\"SID\" TEXT PRIMARY KEY NOT NULL ," + // 0: sid
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"PUBTIME\" TEXT NOT NULL ," + // 2: pubtime
                "\"COLLECTTIME\" TEXT NOT NULL ," + // 3: collecttime
                "\"SOURCE\" TEXT," + // 4: source
                "\"COUNTER\" TEXT NOT NULL ," + // 5: counter
                "\"GOOD\" TEXT," + // 6: good
                "\"COMMENTS\" TEXT NOT NULL ," + // 7: comments
                "\"HOMETEXT\" TEXT," + // 8: hometext
                "\"BODYTEXT\" TEXT);"); // 9: bodytext
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVOR_ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FavorArticle entity) {
        stmt.clearBindings();
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(1, sid);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getPubtime());
        stmt.bindString(4, entity.getCollecttime());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(5, source);
        }
        stmt.bindString(6, entity.getCounter());
 
        String good = entity.getGood();
        if (good != null) {
            stmt.bindString(7, good);
        }
        stmt.bindString(8, entity.getComments());
 
        String hometext = entity.getHometext();
        if (hometext != null) {
            stmt.bindString(9, hometext);
        }
 
        String bodytext = entity.getBodytext();
        if (bodytext != null) {
            stmt.bindString(10, bodytext);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FavorArticle entity) {
        stmt.clearBindings();
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(1, sid);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getPubtime());
        stmt.bindString(4, entity.getCollecttime());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(5, source);
        }
        stmt.bindString(6, entity.getCounter());
 
        String good = entity.getGood();
        if (good != null) {
            stmt.bindString(7, good);
        }
        stmt.bindString(8, entity.getComments());
 
        String hometext = entity.getHometext();
        if (hometext != null) {
            stmt.bindString(9, hometext);
        }
 
        String bodytext = entity.getBodytext();
        if (bodytext != null) {
            stmt.bindString(10, bodytext);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FavorArticle readEntity(Cursor cursor, int offset) {
        FavorArticle entity = new FavorArticle( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sid
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // pubtime
            cursor.getString(offset + 3), // collecttime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // source
            cursor.getString(offset + 5), // counter
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // good
            cursor.getString(offset + 7), // comments
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hometext
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // bodytext
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FavorArticle entity, int offset) {
        entity.setSid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setPubtime(cursor.getString(offset + 2));
        entity.setCollecttime(cursor.getString(offset + 3));
        entity.setSource(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCounter(cursor.getString(offset + 5));
        entity.setGood(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComments(cursor.getString(offset + 7));
        entity.setHometext(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBodytext(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FavorArticle entity, long rowId) {
        return entity.getSid();
    }
    
    @Override
    public String getKey(FavorArticle entity) {
        if(entity != null) {
            return entity.getSid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
